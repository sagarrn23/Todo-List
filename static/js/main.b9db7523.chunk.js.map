{"version":3,"sources":["components/List/List.module.css","components/List/List.js","components/add-task/AddTask.js","App.js","serviceWorker.js","index.js","components/add-task/AddTask.module.css","App.module.css"],"names":["module","exports","List","props","taskClass","classes","myTask","status","taskDone","className","list","check","type","onClick","changeStatus","defaultChecked","task","trash","delete","icon","faTrash","AddTask","addTask","inputWrap","value","initValue","onChange","buttonWrap","submit","Todo","deleteTaskHandler","index","data","state","todo","splice","updateLocalStore","taskDoneHandler","addTaskHandler","newTask","push","name","setState","Promise","resolve","then","storeLocally","storeTask","localStorage","setItem","JSON","stringify","onChangeHandler","e","inputTask","target","parse","getItem","pastList","this","map","key","uuidv4","defaultCheck","main","title","wrap","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b9db7523.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"List_list__3ccy6\",\"check\":\"List_check__2toEP\",\"trash\":\"List_trash__jchAs\",\"myTask\":\"List_myTask__1iSFV\",\"taskDone\":\"List_taskDone__3Gjtt\"};","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport classes from './List.module.css';\n\nconst List = (props) => {\n    let taskClass = classes.myTask;\n\n    if(props.status) {\n        taskClass += \" \" + classes.taskDone;\n    }\n\n    return (\n        <li className={classes.list}>\n            <div className={classes.check}>\n                <input type='checkbox' onClick={props.changeStatus} defaultChecked={props.status}/>\n            </div>\n            <p className={taskClass}>{props.task}</p>\n            <div className={classes.trash} onClick={props.delete}>\n                <FontAwesomeIcon icon={faTrash} />\n            </div>\n        </li>\n    )\n}\n\nexport default List;","import React from 'react';\nimport classes from './AddTask.module.css';\n\nconst AddTask = (props) => {\n    return (\n        <div className={classes.addTask}>\n            <div className={classes.inputWrap}>\n                <input type=\"text\" value={props.initValue} onChange={props.addTask}/>\n            </div>\n            <div className={classes.buttonWrap}>\n                <button onClick={props.submit}>Add</button>\n            </div>\n        </div>\n    )\n}\n\nexport default AddTask;","import React, { Component } from 'react';\nimport List from './components/List/List';\nimport AddTask from './components/add-task/AddTask';\nimport classes from './App.module.css';\nimport './global.css';\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todo: JSON.parse(localStorage.getItem('stored_task')),\n      newTask: ''\n    };\n  }\n\n  // this is to delete a task\n  deleteTaskHandler = (index) => {\n    const data = [...this.state.todo];\n    data.splice(index, 1);\n\n    this.updateLocalStore(data);\n  }\n\n  // this is to complete a task\n  taskDoneHandler = (index) => {\n    const data = [...this.state.todo];\n    data[index].status = !data[index].status;\n    this.updateLocalStore(data);\n  }\n\n  // to add new task\n  addTaskHandler = () => {\n    if(this.state.newTask) {\n      const data = [...this.state.todo];\n      data.push({\n        name: this.state.newTask,\n        status: false\n      });\n      this.setState({\n        newTask: ''\n      })\n      this.updateLocalStore(data);\n    }\n  }\n\n  // update in DB\n  updateLocalStore = (data) => {\n    let promise = new Promise((resolve) => {\n      this.setState({\n        todo: data\n      });\n      resolve();\n    })\n\n    promise.then(() => {\n      this.storeLocally()\n    });   \n  }\n\n  // store state in db\n  storeLocally = () => {\n    var storeTask = [...this.state.todo];\n    localStorage.setItem('stored_task', JSON.stringify(storeTask));\n  }\n\n  // take user inputed text\n  onChangeHandler = (e) => {\n    const inputTask = e.target.value;\n    this.setState({\n      newTask: inputTask\n    });\n  }\n\n  render() {\n    const pastList = this.state.todo.map((data, index) => {\n      return <List \n          key={uuidv4()} \n          task={data.name}\n          delete={() => this.deleteTaskHandler(index)}\n          status={data.status}\n          changeStatus={() => this.taskDoneHandler(index)}\n          defaultCheck={data.status}\n        />;\n    });\n\n    return (\n      <div className={classes.main}>\n        <h1 className={classes.title}>My To Do</h1>\n        <div className={classes.wrap}>\n          <AddTask\n            submit={this.addTaskHandler}\n            addTask={(e) => this.onChangeHandler(e)}\n            initValue={this.state.newTask}\n          />\n\n          <ul>{this.state.todo ? pastList : null}</ul>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTask\":\"AddTask_addTask__2hT6X\",\"inputWrap\":\"AddTask_inputWrap__35RHk\",\"buttonWrap\":\"AddTask_buttonWrap__29V5q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3ZkGI\",\"wrap\":\"App_wrap__29kNz\",\"title\":\"App_title__-GfWs\"};"],"sourceRoot":""}